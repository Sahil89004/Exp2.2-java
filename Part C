import java.util.*;
import java.util.stream.*;

public class Main {
    static class Product {
        String name;
        double price;
        String category;

        public Product(String name, double price, String category) {
            this.name = name;
            this.price = price;
            this.category = category;
        }

        @Override
        public String toString() {
            return name + " (" + price + ")";
        }
    }

    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", 80000, "Electronics"),
            new Product("Smartphone", 50000, "Electronics"),
            new Product("TV", 60000, "Electronics"),
            new Product("Shirt", 1500, "Clothing"),
            new Product("Jeans", 2000, "Clothing"),
            new Product("Sofa", 25000, "Furniture"),
            new Product("Table", 12000, "Furniture")
        );

        Map<String, List<Product>> groupedByCategory = products.stream()
            .collect(Collectors.groupingBy(p -> p.category));

        System.out.println("Products grouped by category:");
        groupedByCategory.forEach((category, list) -> {
            System.out.println(category + ": " + list);
        });

        Map<String, Optional<Product>> maxByCategory = products.stream()
            .collect(Collectors.groupingBy(
                p -> p.category,
                Collectors.maxBy(Comparator.comparingDouble(p -> p.price))
            ));

        System.out.println("\nMost expensive product in each category:");
        maxByCategory.forEach((category, product) -> {
            System.out.println(category + ": " + product.get());
        });

        double averagePrice = products.stream()
            .collect(Collectors.averagingDouble(p -> p.price));

        System.out.println("\nAverage price of all products: " + averagePrice);
    }
}
